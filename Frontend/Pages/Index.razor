@page "/"
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@using WebUI.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using System.Text.Json
@using Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IConfiguration Configuration

<h1>Demo - Order System 2.0</h1>
<hr>
<div class="row">
    <div class="col-md-6">
        <div class="row">
            <div class="col-md-12">
                <SurveyPrompt Title="Generar ordenes " />

                <button class="btn btn-primary" @onclick="SendConfirmation">Generar una Orden</button>
            </div>
            <div class="col-md-12">
                <SurveyPrompt Title="Ingrese la cantidad de ordenes a generar: " />

                <label>Cantidad de Ordenes</label>
                <input type="text" @bind="@CntOrders" @oninput="@((e) => { CntOrders=(string)e.Value;})" />

                <button class="btn btn-primary" @onclick="GenerateOrders">Generar Ordenes</button>
            </div>
            <div class="col-md-12">
                @if (!string.IsNullOrEmpty(MessageOrder))
                {
                    <div class="alert alert-primary mt-4" role="alert">
                        <span class="oi oi-circle-check mr-2" aria-hidden="true"></span>
                        <strong>Respuesta: @MessageOrder</strong>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <h3>Notificaciones (SignalR)</h3>
        <button class="btn btn-primary" @onclick="ClearNotifications">Limpiar notificaciones</button>
        <br />
        <div style="max-height:600px;overflow-y: auto;">
            @foreach (var message in messages)
            {
                if (message.Type == "Initial"){
                    @*<div class="alert alert-warning mt-4" role="alert">
                        <span class="oi oi-cog mr-2" aria-hidden="true"></span>
                        <strong> @message.Message </strong>
                    </div>*@
                }else if (message.Type == "Finish"){
                    <div class="alert alert-success mt-4" role="alert">
                        <span class="oi oi-credit-card mr-2" aria-hidden="true"></span>
                        <strong> @message.Message </strong>
                        <button @onclick="@(() => ShowOrder(message.OrderUuid))" class="btn btn-primary">Ver Orden</button>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private string OrderUuid { get; set; } = "";
    private string CntOrders { get; set; } = "100";
    private HubConnection hubConnection;
    private List<NotificationDto> messages = new List<NotificationDto>();
    private string MessageOrder {get;set;} = "";

    private async Task SendConfirmation()
    {
        string OrderUuid = Guid.NewGuid().ToString();
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"{Configuration["OrdersApiUrl"]}/Orders/confirm/{OrderUuid}");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStringAsync();
            MessageOrder = responseStream.ToString();
        }
    }

    private async Task GenerateOrders()
    {

        for (int x = 1; x <= int.Parse(CntOrders); x++) { 
            string order = Guid.NewGuid().ToString();

            var request = new HttpRequestMessage(HttpMethod.Get,
                $"{Configuration["OrdersApiUrl"]}/Orders/confirm/{order}");

            var client = ClientFactory.CreateClient();

            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var responseStream = await response.Content.ReadAsStringAsync();
                MessageOrder = responseStream.ToString();
            }            
        }
    }

    private async Task ClearNotifications()
    { 
        messages = new List<NotificationDto>();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{Configuration["NotificationsApiUrl"]}/notifications"))
            .Build();

        hubConnection.On<string>("notifications", (message) =>
        {
            var encodedMsg = $"{message}";
            var msg = JsonSerializer.Deserialize<NotificationDto>(encodedMsg);
            messages.Add(msg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    [CascadingParameter] public IModalService Modal { get; set; }

    void ShowOrder(string OrderUuid)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Confirm.OrderUuid), OrderUuid);

        Modal.Show<Confirm>("Informaci√≥n de Orden", parameters);
    }
}